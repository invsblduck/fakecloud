#!/bin/bash

# see if there is a disk image already of this size, if so
# qcow it, otherwise make a new one and qcow *that*
#
function make_bootable_drive() {
    # $1 - dist-release
    # $2 - size in Gb
    # $3 - name

    local distrelease=${1}
    local size=${2}
    local name=${3}

    log_debug "Making bootable drive"

    if [ ! -e ${BASE_DIR}/instances ]; then
	mkdir -p ${BASE_DIR}/instances
    fi

    mkdir -p "${BASE_DIR}/instances/${name}"

    if [ -e "${BASE_DIR}/instances/${name}/${name}.qcow2" ]; then
	log "Instance already exists... choose another name"
	trap deinit ERR EXIT
	exit 1
    fi

    expand_dist_to_sized_base ${distrelease} ${size}
    make_cow_from_sized_base ${distrelease} ${size} ${name}
}

function expand_dist_to_sized_base() {
    # $1 - dist-release
    # $2 - size in Gb

    if [ ! -e ${BASE_DIR}/base ]; then
	mkdir -p ${BASE_DIR}/base
    fi

    local distrelease=${1}
    local size=${2}
    local dist=${distrelease%%-*}
    local release=${distrelease##*-}
    local arch=amd64

    local basename=${distrelease}-${size}
    basepath=${BASE_DIR}/base/${basename}.qcow2

    maybe_make_dist_image ${distrelease}

    if ( have_sized_base ${distrelease} ${size} ); then
	log_debug "Already have bootable sized base..."
	return 0
    fi

    log "Creating sized base for ${distrelease} (size: ${size}G)"
    # otherwise, make the sized base...
    # mountdir=$(mktemp -d)

    # trap "deinit; set +e; umount ${mountdir}; qemu-nbd -d $NBD_DEVICE; rm ${basepath}; rm -rf ${mountdir}; error_exit" SIGINT SIGTERM ERR

    # log_debug "Creating ${2}G copy of ${1}"
    # qemu-img create -f qcow2 -o preallocation=metadata ${basepath} ${2}G

    # log_debug "Copying base image"
    # modprobe nbd
    # qemu-nbd -c $NBD_DEVICE ${basepath}
    # sleep 5
    # mke2fs -j $NBD_DEVICE
    # mount $NBD_DEVICE ${mountdir}
    # tar -xvzf ${BASE_DIR}/minibase/${1}.tar.gz -C ${mountdir}
    # umount ${mountdir}
    # qemu-nbd -d $NBD_DEVICE

    # this is kinda hokey, but we'll make a full-disk image
    # strictly with loopback so we can avoid having to use
    # qemu-nbd

    working=$(mktemp -d)

    function expand_dist_to_sized_base_cleanup() {
	log_debug "cleaning up expand_dist_to_sized_base()"
	set +e
	umount ${working}/mnt/dev
	umount ${working}/mnt
	[ "${part_loop-}" != "" ] && losetup -d ${part_loop}
	[ "${base_loop-}" != "" ] && kpartx -d ${base_loop}
	[ "${base_loop-}" != "" ] && losetup -d ${base_loop}
	[ "${rawfile-}" != "" ] && destroy_raw_device ${rawfile}
	rm -rf ${working}
	echo ${working}
    }

    trap expand_dist_to_sized_base SIGINT SIGTERM ERR EXIT

    log_debug "Creating raw image..."

    make_raw_device ${distrelease} ${size} ${name}
    local rawfile=$_RETVAL

    base_loop=$(losetup -vf ${rawfile} | awk '{ print $NF }')
    loop_basename=$(basename ${base_loop})
    log_debug "Partitioning..."
    parted ${base_loop} mklabel msdos mkpart primary 1m 100%
    kpartx -a ${base_loop}
    log_debug "Formatting..."
    mke2fs -j /dev/mapper/${loop_basename}p1

    # reloop to make grub2 work
    part_loop=$(losetup -vf /dev/mapper/${loop_basename}p1 | awk '{ print $NF }')
    mkdir ${working}/mnt
    mount ${part_loop} ${working}/mnt

    # extract the debootstrap
    log_debug "Extracting..."
    tar -xvzf ${BASE_DIR}/minibase/${1}.tar.gz -C ${working}/mnt
    mkdir -p ${working}/mnt/boot

    # FIXME: debian specific
    log_debug "Installing kernel..."
    package=linux-image-virtual
    grub_package=grub-pc

    if [ "${dist}" == "debian" ]; then
	package=linux-image-${arch}
	grub_package="grub2 grub-common"
    fi

    if [ "${EXTRA_PACKAGES-}" != "" ]; then
	packages=${EXTRA_PACKAGES//,/ }
	log_debug "Installing extra packages..."
	chroot ${working}/mnt /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get install ${packages} -y --force-yes"
    fi

    chroot ${working}/mnt /bin/bash -c "DEBIAN_FRONTEND=noninteractive apt-get install ${grub_package} ${package} -y --force-yes"

    log_debug "Grubbing..."
    mkdir -p ${working}/mnt/boot/grub
    cat > ${working}/mnt/boot/grub/device.map <<EOF
(hd0) ${base_loop}
(hd0,1) ${part_loop}
EOF
    mount --bind /dev ${working}/mnt/dev
    chroot ${working}/mnt /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg

    chroot ${working}/mnt /usr/sbin/grub-install --no-floppy --grub-mkdevicemap=/boot/grub/device.map --root-directory=/ ${base_loop}

    # turn off ubuntu ridiculousness
    if [ -e ${working}/mnt/boot/grub/grub.cfg ]; then
	log_debug "Unfscking ubuntu-style boot options..."
	chmod 600 ${working}/mnt/boot/grub/grub.cfg
	sed -i ${working}/mnt/boot/grub/grub.cfg -e 's/quiet/nomodeset vga=0/'
    fi

    # turn off udev persistant stuff
    if [ -e ${working}/mnt/etc/udev/rules.d/70-persistent-net.rules ]; then
	rm ${working}/mnt/etc/udev/rules.d/70-persistent-net.rules
    fi

    umount ${working}/mnt/dev
    umount ${working}/mnt
    losetup -d ${part_loop}
    sleep 1
    kpartx -d ${base_loop}
    losetup -d ${base_loop}

    log "Converting image to qcow2 compressed image"
    finalize_sized_base ${rawfile} ${BASE_DIR}/base/${basename}.qcow2
    rm -rf ${working}

    trap error_exit SIGINT SIGTERM ERR EXIT
}


